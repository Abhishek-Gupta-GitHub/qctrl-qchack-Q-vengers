{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from qctrlvisualizer import get_qctrl_style, plot_controls\n",
    "from qctrl import Qctrl\n",
    "\n",
    "qctrl = Qctrl()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jsonpickle.ext.numpy as jsonpickle_numpy\n",
    "import jsonpickle\n",
    "import numpy as np\n",
    "\n",
    "jsonpickle_numpy.register_handlers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_ideal_qubit(\n",
    "    duration=1, values=np.array([np.pi]), shots=1024, repetitions=1\n",
    "):\n",
    "\n",
    "    b = np.array([[0, 1], [0, 0]])  # Lowering operator\n",
    "    initial_state = np.array([[1], [0]])  # Initial state of qubit in |0>\n",
    "\n",
    "    with qctrl.create_graph() as graph:\n",
    "\n",
    "        # Create time dependent \\Omega(t)\n",
    "        drive = qctrl.operations.pwc_signal(duration=duration, values=values)\n",
    "\n",
    "        # Construct Hamiltonian (\\Omega(t) b + \\Omega^*(t) b^\\dagger)/2\n",
    "        hamiltonian = qctrl.operations.pwc_operator_hermitian_part(\n",
    "            qctrl.operations.pwc_operator(signal=drive, operator=b)\n",
    "        )\n",
    "\n",
    "        # Solve Schrodinger's equation and get total unitary at the end\n",
    "        unitary = qctrl.operations.time_evolution_operators_pwc(\n",
    "            hamiltonian=hamiltonian,\n",
    "            sample_times=np.array([duration]),\n",
    "        )[-1]\n",
    "        unitary.name = \"unitary\"\n",
    "\n",
    "        # Repeat final unitary\n",
    "        repeated_unitary = np.eye(2)\n",
    "        for _ in range(repetitions):\n",
    "            repeated_unitary = repeated_unitary @ unitary\n",
    "        repeated_unitary.name = \"repeated_unitary\"\n",
    "\n",
    "        # Calculate final state.\n",
    "        state = repeated_unitary @ initial_state\n",
    "\n",
    "        # Calculate final populations.\n",
    "        populations = qctrl.operations.abs(state[:, 0]) ** 2\n",
    "        # Normalize populations because of numerical precision\n",
    "        norm = qctrl.operations.sum(populations)\n",
    "        populations = populations / norm\n",
    "        populations.name = \"populations\"\n",
    "\n",
    "    # Evaluate graph.\n",
    "    result = qctrl.functions.calculate_graph(\n",
    "        graph=graph,\n",
    "        output_node_names=[\"unitary\", \"repeated_unitary\", \"populations\"],\n",
    "    )\n",
    "\n",
    "    # Extract outputs.\n",
    "    unitary = result.output[\"unitary\"][\"value\"]\n",
    "    repeated_unitary = result.output[\"repeated_unitary\"][\"value\"]\n",
    "    populations = result.output[\"populations\"][\"value\"]\n",
    "\n",
    "    # Sample projective measurements.\n",
    "    measurements = np.random.choice(2, size=shots, p=populations)\n",
    "\n",
    "    results = {\"unitary\": unitary, \"measurements\": measurements}\n",
    "\n",
    "    return results\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "duration = 10\n",
    "values = np.array([-1, 3, 2, 3, -2, -1])\n",
    "\n",
    "\n",
    "def get_pulse_plot_dict(name=\"default\", duration=1, values=np.array([1.0])):\n",
    "    segments = len(values)\n",
    "    segment_durations = duration / segments\n",
    "    pulse_plot_dict = {\n",
    "        name: [{\"duration\": segment_durations, \"value\": v} for v in values]\n",
    "    }\n",
    "    return pulse_plot_dict\n",
    "\n",
    "\n",
    "example_pulse = get_pulse_plot_dict(name=\"$\\Omega$\", duration=duration, values=values)\n",
    "\n",
    "fig = plt.figure()\n",
    "plot_controls(fig, example_pulse, polar=False)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_rabi_rate = 20 * 2 * np.pi  # MHz\n",
    "h_duration = 3 * np.pi / (2 * max_rabi_rate)  # us\n",
    "h_values = np.array([-1j * max_rabi_rate, max_rabi_rate, max_rabi_rate])\n",
    "h_pulse = get_pulse_plot_dict(name=\"$\\Omega_{H}$\", duration=h_duration, values=h_values)\n",
    "fig = plt.figure()\n",
    "plot_controls(fig, h_pulse, polar=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has completed in 4s.\n"
     ]
    }
   ],
   "source": [
    "shots = 1024\n",
    "h_results = simulate_ideal_qubit(duration=h_duration, values=h_values, shots=shots)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Realised H Gate:\n",
      "[[ 2.22044605e-16-0.70710678j -2.22044605e-16-0.70710678j]\n",
      " [ 2.22044605e-16-0.70710678j  2.22044605e-16+0.70710678j]]\n",
      "Ideal H Gate:\n",
      "[[ 0.70710678  0.70710678]\n",
      " [ 0.70710678 -0.70710678]]\n",
      "H Gate Error:1.1102230246251565e-15\n"
     ]
    }
   ],
   "source": [
    "error_norm = (\n",
    "    lambda operate_a, operator_b: 1\n",
    "    - np.abs(np.trace((operate_a.conj().T @ operator_b)) / 2) ** 2\n",
    ")\n",
    "realised_h_gate = h_results[\"unitary\"]\n",
    "ideal_h_gate = (1 / np.sqrt(2)) * np.array([[1, 1], [1, -1]])\n",
    "h_error = error_norm(realised_h_gate, ideal_h_gate)\n",
    "print(\"Realised H Gate:\")\n",
    "print(realised_h_gate)\n",
    "print(\"Ideal H Gate:\")\n",
    "print(ideal_h_gate)\n",
    "print(\"H Gate Error:\" + str(h_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "h_measurements = h_results[\"measurements\"]\n",
    "\n",
    "\n",
    "def estimate_probability_of_one(measurements):\n",
    "    size = len(measurements)\n",
    "    probability = np.mean(measurements)\n",
    "    standard_error = np.std(measurements) / np.sqrt(size)\n",
    "    return (probability, standard_error)\n",
    "\n",
    "h_probability, h_standard_error = estimate_probability_of_one(h_measurements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H estimated probability of getting 1:0.4755859375\n",
      "H estimate standard error:0.0156063624330228\n"
     ]
    }
   ],
   "source": [
    "print(\"H estimated probability of getting 1:\" + str(h_probability))\n",
    "print(\"H estimate standard error:\" + str(h_standard_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has completed in 4s.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has completed in 4s.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has completed in 4s.\n"
     ]
    }
   ],
   "source": [
    "epsilon = 0.03\n",
    "h_duration = (3 * np.pi + epsilon) / (2 * max_rabi_rate)  # us\n",
    "\n",
    "repetitions = np.array([1, 17, 127])\n",
    "repetition_results = []\n",
    "for reps in repetitions:\n",
    "    repetition_results.append(\n",
    "        simulate_ideal_qubit(\n",
    "            duration=h_duration, values=h_values, shots=shots, repetitions=reps\n",
    "        )\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "probability_estimates = np.zeros(3)\n",
    "standard_errors = np.zeros(3)\n",
    "\n",
    "for count, result in enumerate(repetition_results):\n",
    "    probability_estimates[count], standard_errors[count] = estimate_probability_of_one(\n",
    "        result[\"measurements\"]\n",
    "    )\n",
    "\n",
    "plt.plot(repetitions, probability_estimates, \"s\", color=\"#680CE9\")\n",
    "plt.plot(repetitions, probability_estimates + standard_errors, \"_\", color=\"#680CE9\")\n",
    "plt.plot(repetitions, probability_estimates - standard_errors, \"_\", color=\"#680CE9\")\n",
    "plt.hlines(0.5, 0, 127, linestyle=\":\")\n",
    "plt.xlabel(\"Repetition\")\n",
    "plt.ylabel(\"Probability Estimate\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_more_realistic_qubit(\n",
    "    duration=1, values=np.array([np.pi]), shots=1024, repetitions=1\n",
    "):\n",
    "\n",
    "    # 1. Limits for drive amplitudes\n",
    "    assert np.amax(values) <= 1.0\n",
    "    assert np.amin(values) >= -1.0\n",
    "    max_drive_amplitude = 2 * np.pi * 20  # MHz\n",
    "\n",
    "    # 2. Dephasing error\n",
    "    dephasing_error = -2 * 2 * np.pi  # MHz\n",
    "\n",
    "    # 3. Amplitude error\n",
    "    amplitude_i_error = 0.98\n",
    "    amplitude_q_error = 1.03\n",
    "\n",
    "    # 4. Control line bandwidth limit\n",
    "    cut_off_frequency = 2 * np.pi * 10  # MHz\n",
    "    resample_segment_count = 1000\n",
    "\n",
    "    # 5. SPAM error confusion matrix\n",
    "    confusion_matrix = np.array([[0.99, 0.01], [0.02, 0.98]])\n",
    "\n",
    "    # Lowering operator\n",
    "    b = np.array([[0, 1], [0, 0]])\n",
    "    # Number operator\n",
    "    n = np.diag([0, 1])\n",
    "    # Initial state\n",
    "    initial_state = np.array([[1], [0]])\n",
    "\n",
    "    with qctrl.create_graph() as graph:\n",
    "        # Apply 1. max Rabi rate.\n",
    "        values = values * max_drive_amplitude\n",
    "\n",
    "        # Apply 3. amplitude errors.\n",
    "        values_i = np.real(values) * amplitude_i_error\n",
    "        values_q = np.imag(values) * amplitude_q_error\n",
    "        values = values_i + 1j * values_q\n",
    "\n",
    "        # Apply 4. bandwidth limits\n",
    "        drive_unfiltered = qctrl.operations.pwc_signal(duration=duration, values=values)\n",
    "        drive_filtered = qctrl.operations.convolve_pwc(\n",
    "            pwc=drive_unfiltered,\n",
    "            kernel_integral=qctrl.operations.sinc_integral_function(cut_off_frequency),\n",
    "        )\n",
    "        drive = qctrl.operations.discretize_stf(\n",
    "            drive_filtered, duration=duration, segments_count=resample_segment_count\n",
    "        )\n",
    "\n",
    "        # Construct microwave drive\n",
    "        drive_term = qctrl.operations.pwc_operator_hermitian_part(\n",
    "            qctrl.operations.pwc_operator(signal=drive, operator=b)\n",
    "        )\n",
    "\n",
    "        # Construct 2. dephasing term.\n",
    "        dephasing_term = qctrl.operations.constant_pwc_operator(\n",
    "            operator=dephasing_error * n,\n",
    "            duration=duration,\n",
    "        )\n",
    "\n",
    "        # Construct Hamiltonian.\n",
    "        hamiltonian = qctrl.operations.pwc_sum(\n",
    "            [\n",
    "                drive_term,\n",
    "                dephasing_term,\n",
    "            ]\n",
    "        )\n",
    "\n",
    "        # Solve Schrodinger's equation and get total unitary at the end\n",
    "        unitary = qctrl.operations.time_evolution_operators_pwc(\n",
    "            hamiltonian=hamiltonian,\n",
    "            sample_times=np.array([duration]),\n",
    "        )[-1]\n",
    "        unitary.name = \"unitary\"\n",
    "\n",
    "        # Repeat final unitary\n",
    "        repeated_unitary = np.eye(2)\n",
    "        for _ in range(repetitions):\n",
    "            repeated_unitary = repeated_unitary @ unitary\n",
    "        repeated_unitary.name = \"repeated_unitary\"\n",
    "\n",
    "        # Calculate final state.\n",
    "        state = repeated_unitary @ initial_state\n",
    "\n",
    "        # Calculate final populations.\n",
    "        populations = qctrl.operations.abs(state[:, 0]) ** 2\n",
    "        # Normalize populations\n",
    "        norm = qctrl.operations.sum(populations)\n",
    "        populations = populations / norm\n",
    "        populations.name = \"populations\"\n",
    "\n",
    "    # Evaluate graph.\n",
    "    result = qctrl.functions.calculate_graph(\n",
    "        graph=graph,\n",
    "        output_node_names=[\"unitary\", \"repeated_unitary\", \"populations\"],\n",
    "    )\n",
    "\n",
    "    # Extract outputs.\n",
    "    unitary = result.output[\"unitary\"][\"value\"]\n",
    "    repeated_unitary = result.output[\"repeated_unitary\"][\"value\"]\n",
    "    populations = result.output[\"populations\"][\"value\"]\n",
    "\n",
    "    # Sample projective measurements.\n",
    "    true_measurements = np.random.choice(2, size=shots, p=populations)\n",
    "    measurements = np.array(\n",
    "        [np.random.choice(2, p=confusion_matrix[m]) for m in true_measurements]\n",
    "    )\n",
    "\n",
    "    results = {\"unitary\": unitary, \"measurements\": measurements}\n",
    "\n",
    "    return results\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_rabi_rate = 20 * 2 * np.pi  # MHz\n",
    "h_duration = 3 * np.pi / (2 * max_rabi_rate)  # us\n",
    "h_values = np.array([-1j, 1, 1])\n",
    "shots = 1024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has started.\n",
      "Your task calculate_graph has completed in 7s.\n"
     ]
    }
   ],
   "source": [
    "h_results = simulate_more_realistic_qubit(\n",
    "    duration=h_duration, values=h_values, shots=shots\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Realised H Gate:\n",
      "[[ 0.45224334-0.15289235j -0.19310482-0.85721084j]\n",
      " [ 0.56122323-0.67611269j  0.33354009+0.34154226j]]\n",
      "Ideal H Gate:\n",
      "[[ 0.70710678  0.70710678]\n",
      " [ 0.70710678 -0.70710678]]\n",
      "H Gate Error:0.4564001984279389\n",
      "H estimated probability of getting 1:0.7626953125\n",
      "H estimate standard error:0.01329470541900983\n"
     ]
    }
   ],
   "source": [
    "realised_h_gate = h_results[\"unitary\"]\n",
    "ideal_h_gate = (1 / np.sqrt(2)) * np.array([[1, 1], [1, -1]])\n",
    "h_error = error_norm(realised_h_gate, ideal_h_gate)\n",
    "h_measurements = h_results[\"measurements\"]\n",
    "h_probability, h_standard_error = estimate_probability_of_one(h_measurements)\n",
    "print(\"Realised H Gate:\")\n",
    "print(realised_h_gate)\n",
    "print(\"Ideal H Gate:\")\n",
    "print(ideal_h_gate)\n",
    "print(\"H Gate Error:\" + str(h_error))\n",
    "print(\"H estimated probability of getting 1:\" + str(h_probability))\n",
    "print(\"H estimate standard error:\" + str(h_standard_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 11s.\n",
      "Optimized cost:\t 1.3448050167411287e-13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1) ROBUST CONTROL OF A SINGLE QUBIT :  \n",
    "\n",
    "# Define standard matrices\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_m = np.array([[0, 1], [0, 0]])\n",
    "\n",
    "# Define physical constants\n",
    "nu = 2 * np.pi * 0.5 * 1e6  # Hz\n",
    "gamma_max = 2 * np.pi * 0.5e6  # Hz\n",
    "alpha_max = 2 * np.pi * 0.5e6  # Hz\n",
    "segment_count = 50\n",
    "duration = 10e-6  # s\n",
    "\n",
    "# Define the data flow graph describing the system\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create a constant piecewise-constant (PWC) operator representing the\n",
    "    # detuning term\n",
    "    detuning = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration,\n",
    "        operator=nu * sigma_z / 2,\n",
    "    )\n",
    "\n",
    "    # Create a complex PWC signal, with optimizable modulus and phase,\n",
    "    # representing gamma(t)\n",
    "    gamma = qctrl.operations.complex_pwc_signal(\n",
    "        moduli=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            lower_bound=0,\n",
    "            upper_bound=gamma_max,\n",
    "        ),\n",
    "        phases=qctrl.operations.unbounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            initial_lower_bound=0,\n",
    "            initial_upper_bound=2 * np.pi,\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"gamma\",\n",
    "    )\n",
    "    # Create a PWC operator representing the drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=gamma, operator=sigma_m)\n",
    "    )\n",
    "\n",
    "    # Create a real PWC signal, with optimizable amplitude, representing\n",
    "    # alpha(t)\n",
    "    alpha = qctrl.operations.pwc_signal(\n",
    "        values=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"alpha\",\n",
    "    )\n",
    "    # Create a PWC operator representing the clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha, operator=sigma_z / 2)\n",
    "\n",
    "    # Create a constant PWC operator representing the dephasing noise\n",
    "    # (note that we scale by 1/duration to ensure consistent units between\n",
    "    # the noise Hamiltonian and the control Hamiltonian)\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create the target operator\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        hamiltonian=qctrl.operations.pwc_sum([detuning, drive, shift]),\n",
    "        noise_operators=[dephasing],\n",
    "        target_operator=target_operator,\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha\", \"gamma\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha$\": optimization_result.output[\"alpha\"],\n",
    "        \"$\\\\gamma$\": optimization_result.output[\"gamma\"],\n",
    "    },\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 14s.\n",
      "Optimized cost:\t 5.203717220664784e-11\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2) TIME-SYMMETRIZED PULSES : \n",
    "\n",
    "# Define standard matrices\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_m = np.array([[0, 1], [0, 0]])\n",
    "\n",
    "# Define physical constraints\n",
    "gamma_max = 2 * np.pi * 8.5e6  # Hz\n",
    "alpha_max = 2 * np.pi * 8.5e6  # Hz\n",
    "nu = 2 * np.pi * 6e6  # Hz\n",
    "segment_count = 50\n",
    "duration = 154e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create detuning term\n",
    "    detuning = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration,\n",
    "        operator=nu * sigma_z / 2,\n",
    "    )\n",
    "\n",
    "    # Create a complex PWC signal describing the first half of gamma(t)\n",
    "    half_gamma = qctrl.operations.complex_pwc_signal(\n",
    "        moduli=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=0, upper_bound=gamma_max\n",
    "        ),\n",
    "        phases=qctrl.operations.unbounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            initial_lower_bound=0,\n",
    "            initial_upper_bound=2 * np.pi,\n",
    "        ),\n",
    "        duration=duration / 2,\n",
    "    )\n",
    "    # Define gamma(t) by symmetrizing half_gamma\n",
    "    gamma = qctrl.operations.symmetrize_pwc(\n",
    "        half_gamma,\n",
    "        name=\"gamma\",\n",
    "    )\n",
    "    # Create drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=gamma, operator=sigma_m)\n",
    "    )\n",
    "\n",
    "    # Create alpha(t) similarly\n",
    "    alpha = qctrl.operations.symmetrize_pwc(\n",
    "        qctrl.operations.pwc_signal(\n",
    "            values=qctrl.operations.bounded_optimization_variable(\n",
    "                count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "            ),\n",
    "            duration=duration / 2,\n",
    "        ),\n",
    "        name=\"alpha\",\n",
    "    )\n",
    "    # Create clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha, operator=sigma_z / 2)\n",
    "\n",
    "    # Create dephasing noise term\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create target\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum([detuning, drive, shift]),\n",
    "        target_operator,\n",
    "        [dephasing],\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha\", \"gamma\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha$\": optimization_result.output[\"alpha\"],\n",
    "        \"$\\\\gamma$\": optimization_result.output[\"gamma\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 17s.\n",
      "Optimized cost:\t 2.6645352591003757e-15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3) 3) NON-LINEAR DEPENDENCE ON CONTROL PULSES :\n",
    "\n",
    "# Define Pauli matrices\n",
    "sigma_x = np.array([[0, 1], [1, 0]])\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "\n",
    "# Define physical constraints\n",
    "alpha_max = 2 * np.pi * 6e6  # Hz\n",
    "segment_count = 40\n",
    "duration = 200e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create the values backing the alpha_1(t) signal\n",
    "    alpha_1_values = qctrl.operations.bounded_optimization_variable(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "    )\n",
    "\n",
    "    # Create the alpha_1(t) signal\n",
    "    alpha_1 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_values, duration=duration, name=\"alpha_1\"\n",
    "    )\n",
    "\n",
    "    # Apply a non-linear transformation to create the alpha_1_squared(t) signal\n",
    "    alpha_1_squared_values = alpha_1_values * (alpha_1_values / alpha_max)\n",
    "    alpha_1_squared = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_squared_values, duration=duration, name=\"alpha_1_squared\"\n",
    "    )\n",
    "\n",
    "    # Create the alpha_2(t) signal\n",
    "    alpha_2 = qctrl.operations.pwc_signal(\n",
    "        values=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"alpha_2\",\n",
    "    )\n",
    "\n",
    "    # Create Hamiltonian terms\n",
    "    x_term = qctrl.operations.pwc_operator(signal=alpha_1, operator=sigma_x)\n",
    "    y_term = qctrl.operations.pwc_operator(signal=alpha_1_squared, operator=sigma_y)\n",
    "    z_term = qctrl.operations.pwc_operator(signal=alpha_2, operator=sigma_z)\n",
    "\n",
    "    target_operator = qctrl.operations.target(operator=sigma_x)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum(terms=[x_term, y_term, z_term]),\n",
    "        target_operator=target_operator,\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha_1\", \"alpha_1_squared\", \"alpha_2\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha_1$\": optimization_result.output[\"alpha_1\"],\n",
    "        \"$\\\\alpha_1^2$\": optimization_result.output[\"alpha_1_squared\"],\n",
    "        \"$\\\\alpha_2$\": optimization_result.output[\"alpha_2\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 72s.\n",
      "Optimized cost:\t 1.0461552985451995e-12\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4) BAND-LIMITED PULSES WITH BOUNDED SLEW RATES\n",
    "\n",
    "# Define standard matrices\n",
    "sigma_x = np.array([[0, 1], [1, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "\n",
    "# Define physical constraints\n",
    "alpha_max = 2 * np.pi * 8.5e6  # Hz\n",
    "max_slew_rate = alpha_max / 10\n",
    "segment_count = 250\n",
    "duration = 400e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create alpha_1(t) signal\n",
    "    alpha_1_values = qctrl.operations.anchored_difference_bounded_variables(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "        difference_bound=max_slew_rate,\n",
    "    )\n",
    "    alpha_1 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_values, duration=duration, name=\"alpha_1\"\n",
    "    )\n",
    "\n",
    "    # Create alpha_2(t) signal\n",
    "    alpha_2_values = qctrl.operations.anchored_difference_bounded_variables(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "        difference_bound=max_slew_rate,\n",
    "    )\n",
    "    alpha_2 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_2_values, duration=duration, name=\"alpha_2\"\n",
    "    )\n",
    "\n",
    "    # Create drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=alpha_1, operator=sigma_x / 2)\n",
    "    )\n",
    "\n",
    "    # Create clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha_2, operator=sigma_z / 2)\n",
    "\n",
    "    # Create dephasing noise term\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create target\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum([drive, shift]),\n",
    "        target_operator,\n",
    "        [dephasing],\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha_1\", \"alpha_2\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha_1$\": optimization_result.output[\"alpha_1\"],\n",
    "        \"$\\\\alpha_2$\": optimization_result.output[\"alpha_2\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "control_count = 5\n",
    "segment_count = 16\n",
    "duration = 30.0\n",
    "shot_count = 32\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "controls = []\n",
    "for k in range(control_count):\n",
    "    # Create a random string of complex numbers for each controls.\n",
    "    real_part = np.random.random(size=[segment_count])\n",
    "    imag_part = np.random.random(size=[segment_count])\n",
    "    values = 0.15 * k * (real_part + 1j * imag_part)\n",
    "\n",
    "    controls.append({\"duration\": duration, \"values\": values})\n",
    "\n",
    "# Plot the last control as an example.\n",
    "plot_controls(\n",
    "    figure=plt.figure(),\n",
    "    controls={\n",
    "        \"$\\Omega$\": [\n",
    "            {\"duration\": duration / segment_count, \"value\": value} for value in values\n",
    "        ]\n",
    "    },\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_qchack_measurements has completed in 4s.\n"
     ]
    }
   ],
   "source": [
    "# Obtain the results of the experiment.\n",
    "experiment_results = qctrl.functions.calculate_qchack_measurements(\n",
    "    controls=controls,\n",
    "    shot_count=shot_count,\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "control #0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "control #1: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "control #2: [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0]\n",
      "control #3: [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1]\n",
      "control #4: [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "measurements = experiment_results.measurements\n",
    "for k, measurement_counts in enumerate(measurements):\n",
    "    print(f\"control #{k}: {measurement_counts}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "control #0: P(|0>) = 0.97, P(|1>) = 0.03, P(|2>) = 0.00\n",
      "control #1: P(|0>) = 0.97, P(|1>) = 0.03, P(|2>) = 0.00\n",
      "control #2: P(|0>) = 0.53, P(|1>) = 0.47, P(|2>) = 0.00\n",
      "control #3: P(|0>) = 0.12, P(|1>) = 0.88, P(|2>) = 0.00\n",
      "control #4: P(|0>) = 0.69, P(|1>) = 0.31, P(|2>) = 0.00\n"
     ]
    }
   ],
   "source": [
    "for k, measurement_counts in enumerate(measurements):\n",
    "    p0 = measurement_counts.count(0) / shot_count\n",
    "    p1 = measurement_counts.count(1) / shot_count\n",
    "    p2 = measurement_counts.count(2) / shot_count\n",
    "    print(f\"control #{k}: P(|0>) = {p0:.2f}, P(|1>) = {p1:.2f}, P(|2>) = {p2:.2f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_qchack_measurements has completed in 4s.\n",
      "With  1 repetitions: P(|0>) = 0.41, P(|1>) = 0.59, P(|2>) = 0.00\n",
      "With  4 repetitions: P(|0>) = 0.34, P(|1>) = 0.66, P(|2>) = 0.00\n",
      "With 16 repetitions: P(|0>) = 0.47, P(|1>) = 0.53, P(|2>) = 0.00\n",
      "With 32 repetitions: P(|0>) = 0.53, P(|1>) = 0.47, P(|2>) = 0.00\n",
      "With 64 repetitions: P(|0>) = 0.62, P(|1>) = 0.34, P(|2>) = 0.03\n"
     ]
    }
   ],
   "source": [
    "repetitions = [1, 4, 16, 32, 64]\n",
    "\n",
    "controls = []\n",
    "# Create a random string of complex numbers for all control,\n",
    "# but set a different repetition_count for each control.\n",
    "real_part = np.random.random(size=[segment_count])\n",
    "imag_part = np.random.random(size=[segment_count])\n",
    "values = 0.5 * (real_part + 1j * imag_part)\n",
    "\n",
    "for repetition_count in repetitions:\n",
    "    controls.append(\n",
    "        {\"duration\": duration, \"values\": values, \"repetition_count\": repetition_count}\n",
    "    )\n",
    "\n",
    "experiment_results = qctrl.functions.calculate_qchack_measurements(\n",
    "    controls=controls,\n",
    "    shot_count=shot_count,\n",
    ")\n",
    "\n",
    "for repetition_count, measurement_counts in zip(\n",
    "    repetitions, experiment_results.measurements\n",
    "):\n",
    "    p0 = measurement_counts.count(0) / shot_count\n",
    "    p1 = measurement_counts.count(1) / shot_count\n",
    "    p2 = measurement_counts.count(2) / shot_count\n",
    "    print(\n",
    "        f\"With {repetition_count:2d} repetitions: P(|0>) = {p0:.2f}, P(|1>) = {p1:.2f}, P(|2>) = {p2:.2f}\"\n",
    "    )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
