{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from qctrlvisualizer import get_qctrl_style, plot_controls\n",
    "from qctrl import Qctrl\n",
    "\n",
    "qctrl = Qctrl()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "import jsonpickle.ext.numpy as jsonpickle_numpy\n",
    "import jsonpickle\n",
    "import numpy as np\n",
    "\n",
    "jsonpickle_numpy.register_handlers()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_ideal_qubit(\n",
    "    duration=1, values=np.array([np.pi]), shots=1024, repetitions=1\n",
    "):\n",
    "\n",
    "    b = np.array([[0, 1], [0, 0]])  # Lowering operator\n",
    "    initial_state = np.array([[1], [0]])  # Initial state of qubit in |0>\n",
    "\n",
    "    with qctrl.create_graph() as graph:\n",
    "\n",
    "        # Create time dependent \\Omega(t)\n",
    "        drive = qctrl.operations.pwc_signal(duration=duration, values=values)\n",
    "\n",
    "        # Construct Hamiltonian (\\Omega(t) b + \\Omega^*(t) b^\\dagger)/2\n",
    "        hamiltonian = qctrl.operations.pwc_operator_hermitian_part(\n",
    "            qctrl.operations.pwc_operator(signal=drive, operator=b)\n",
    "        )\n",
    "\n",
    "        # Solve Schrodinger's equation and get total unitary at the end\n",
    "        unitary = qctrl.operations.time_evolution_operators_pwc(\n",
    "            hamiltonian=hamiltonian,\n",
    "            sample_times=np.array([duration]),\n",
    "        )[-1]\n",
    "        unitary.name = \"unitary\"\n",
    "\n",
    "        # Repeat final unitary\n",
    "        repeated_unitary = np.eye(2)\n",
    "        for _ in range(repetitions):\n",
    "            repeated_unitary = repeated_unitary @ unitary\n",
    "        repeated_unitary.name = \"repeated_unitary\"\n",
    "\n",
    "        # Calculate final state.\n",
    "        state = repeated_unitary @ initial_state\n",
    "\n",
    "        # Calculate final populations.\n",
    "        populations = qctrl.operations.abs(state[:, 0]) ** 2\n",
    "        # Normalize populations because of numerical precision\n",
    "        norm = qctrl.operations.sum(populations)\n",
    "        populations = populations / norm\n",
    "        populations.name = \"populations\"\n",
    "\n",
    "    # Evaluate graph.\n",
    "    result = qctrl.functions.calculate_graph(\n",
    "        graph=graph,\n",
    "        output_node_names=[\"unitary\", \"repeated_unitary\", \"populations\"],\n",
    "    )\n",
    "\n",
    "    # Extract outputs.\n",
    "    unitary = result.output[\"unitary\"][\"value\"]\n",
    "    repeated_unitary = result.output[\"repeated_unitary\"][\"value\"]\n",
    "    populations = result.output[\"populations\"][\"value\"]\n",
    "\n",
    "    # Sample projective measurements.\n",
    "    measurements = np.random.choice(2, size=shots, p=populations)\n",
    "\n",
    "    results = {\"unitary\": unitary, \"measurements\": measurements}\n",
    "\n",
    "    return results\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "duration = 10\n",
    "values = np.array([-1, 3, 2, 3, -2, -1])\n",
    "\n",
    "\n",
    "def get_pulse_plot_dict(name=\"default\", duration=1, values=np.array([1.0])):\n",
    "    segments = len(values)\n",
    "    segment_durations = duration / segments\n",
    "    pulse_plot_dict = {\n",
    "        name: [{\"duration\": segment_durations, \"value\": v} for v in values]\n",
    "    }\n",
    "    return pulse_plot_dict\n",
    "\n",
    "\n",
    "example_pulse = get_pulse_plot_dict(name=\"$\\Omega$\", duration=duration, values=values)\n",
    "\n",
    "fig = plt.figure()\n",
    "plot_controls(fig, example_pulse, polar=False)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_rabi_rate = 20 * 2 * np.pi  # MHz\n",
    "not_duration = np.pi / (max_rabi_rate)  # us\n",
    "not_values = np.array([max_rabi_rate])\n",
    "not_pulse = get_pulse_plot_dict(\n",
    "    name=\"$\\Omega_{NOT}$\", duration=not_duration, values=not_values\n",
    ")\n",
    "fig = plt.figure()\n",
    "plot_controls(fig, not_pulse, polar=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has completed in 4s.\n"
     ]
    }
   ],
   "source": [
    "shots = 1024\n",
    "\n",
    "not_results = simulate_ideal_qubit(\n",
    "    duration=not_duration, values=not_values, shots=shots\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Realised NOT Gate:\n",
      "[[2.83276945e-16+0.j 0.00000000e+00-1.j]\n",
      " [0.00000000e+00-1.j 2.83276945e-16+0.j]]\n",
      "Ideal NOT Gate:\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "NOT Gate Error:4.440892098500626e-16\n",
      "\n"
     ]
    }
   ],
   "source": [
    "error_norm = (\n",
    "    lambda operate_a, operator_b: 1\n",
    "    - np.abs(np.trace((operate_a.conj().T @ operator_b)) / 2) ** 2\n",
    ")\n",
    "realised_not_gate = not_results[\"unitary\"]\n",
    "ideal_not_gate = np.array([[0, 1], [1, 0]])\n",
    "not_error = error_norm(realised_not_gate, ideal_not_gate)\n",
    "print(\"Realised NOT Gate:\")\n",
    "print(realised_not_gate)\n",
    "print(\"Ideal NOT Gate:\")\n",
    "print(ideal_not_gate)\n",
    "print(\"NOT Gate Error:\" + str(not_error) + \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "not_measurements = not_results[\"measurements\"]\n",
    "\n",
    "\n",
    "def estimate_probability_of_one(measurements):\n",
    "    size = len(measurements)\n",
    "    probability = np.mean(measurements)\n",
    "    standard_error = np.std(measurements) / np.sqrt(size)\n",
    "    return (probability, standard_error)\n",
    "\n",
    "not_probability, not_standard_error = estimate_probability_of_one(not_measurements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NOT estimated probability of getting 1:1.0\n",
      "NOT estimate standard error:0.0\n"
     ]
    }
   ],
   "source": [
    "print(\"NOT estimated probability of getting 1:\" + str(not_probability))\n",
    "print(\"NOT estimate standard error:\" + str(not_standard_error))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_more_realistic_qubit(\n",
    "    duration=1, values=np.array([np.pi]), shots=1024, repetitions=1\n",
    "):\n",
    "\n",
    "    # 1. Limits for drive amplitudes\n",
    "    assert np.amax(values) <= 1.0\n",
    "    assert np.amin(values) >= -1.0\n",
    "    max_drive_amplitude = 2 * np.pi * 20  # MHz\n",
    "\n",
    "    # 2. Dephasing error\n",
    "    dephasing_error = -2 * 2 * np.pi  # MHz\n",
    "\n",
    "    # 3. Amplitude error\n",
    "    amplitude_i_error = 0.98\n",
    "    amplitude_q_error = 1.03\n",
    "\n",
    "    # 4. Control line bandwidth limit\n",
    "    cut_off_frequency = 2 * np.pi * 10  # MHz\n",
    "    resample_segment_count = 1000\n",
    "\n",
    "    # 5. SPAM error confusion matrix\n",
    "    confusion_matrix = np.array([[0.99, 0.01], [0.02, 0.98]])\n",
    "\n",
    "    # Lowering operator\n",
    "    b = np.array([[0, 1], [0, 0]])\n",
    "    # Number operator\n",
    "    n = np.diag([0, 1])\n",
    "    # Initial state\n",
    "    initial_state = np.array([[1], [0]])\n",
    "\n",
    "    with qctrl.create_graph() as graph:\n",
    "        # Apply 1. max Rabi rate.\n",
    "        values = values * max_drive_amplitude\n",
    "\n",
    "        # Apply 3. amplitude errors.\n",
    "        values_i = np.real(values) * amplitude_i_error\n",
    "        values_q = np.imag(values) * amplitude_q_error\n",
    "        values = values_i + 1j * values_q\n",
    "\n",
    "        # Apply 4. bandwidth limits\n",
    "        drive_unfiltered = qctrl.operations.pwc_signal(duration=duration, values=values)\n",
    "        drive_filtered = qctrl.operations.convolve_pwc(\n",
    "            pwc=drive_unfiltered,\n",
    "            kernel_integral=qctrl.operations.sinc_integral_function(cut_off_frequency),\n",
    "        )\n",
    "        drive = qctrl.operations.discretize_stf(\n",
    "            drive_filtered, duration=duration, segments_count=resample_segment_count\n",
    "        )\n",
    "\n",
    "        # Construct microwave drive\n",
    "        drive_term = qctrl.operations.pwc_operator_hermitian_part(\n",
    "            qctrl.operations.pwc_operator(signal=drive, operator=b)\n",
    "        )\n",
    "\n",
    "        # Construct 2. dephasing term.\n",
    "        dephasing_term = qctrl.operations.constant_pwc_operator(\n",
    "            operator=dephasing_error * n,\n",
    "            duration=duration,\n",
    "        )\n",
    "\n",
    "        # Construct Hamiltonian.\n",
    "        hamiltonian = qctrl.operations.pwc_sum(\n",
    "            [\n",
    "                drive_term,\n",
    "                dephasing_term,\n",
    "            ]\n",
    "        )\n",
    "\n",
    "        # Solve Schrodinger's equation and get total unitary at the end\n",
    "        unitary = qctrl.operations.time_evolution_operators_pwc(\n",
    "            hamiltonian=hamiltonian,\n",
    "            sample_times=np.array([duration]),\n",
    "        )[-1]\n",
    "        unitary.name = \"unitary\"\n",
    "\n",
    "        # Repeat final unitary\n",
    "        repeated_unitary = np.eye(2)\n",
    "        for _ in range(repetitions):\n",
    "            repeated_unitary = repeated_unitary @ unitary\n",
    "        repeated_unitary.name = \"repeated_unitary\"\n",
    "\n",
    "        # Calculate final state.\n",
    "        state = repeated_unitary @ initial_state\n",
    "\n",
    "        # Calculate final populations.\n",
    "        populations = qctrl.operations.abs(state[:, 0]) ** 2\n",
    "        # Normalize populations\n",
    "        norm = qctrl.operations.sum(populations)\n",
    "        populations = populations / norm\n",
    "        populations.name = \"populations\"\n",
    "\n",
    "    # Evaluate graph.\n",
    "    result = qctrl.functions.calculate_graph(\n",
    "        graph=graph,\n",
    "        output_node_names=[\"unitary\", \"repeated_unitary\", \"populations\"],\n",
    "    )\n",
    "\n",
    "    # Extract outputs.\n",
    "    unitary = result.output[\"unitary\"][\"value\"]\n",
    "    repeated_unitary = result.output[\"repeated_unitary\"][\"value\"]\n",
    "    populations = result.output[\"populations\"][\"value\"]\n",
    "\n",
    "    # Sample projective measurements.\n",
    "    true_measurements = np.random.choice(2, size=shots, p=populations)\n",
    "    measurements = np.array(\n",
    "        [np.random.choice(2, p=confusion_matrix[m]) for m in true_measurements]\n",
    "    )\n",
    "\n",
    "    results = {\"unitary\": unitary, \"measurements\": measurements}\n",
    "\n",
    "    return results\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_graph has started.\n",
      "Your task calculate_graph has completed in 7s.\n"
     ]
    }
   ],
   "source": [
    "max_rabi_rate = 20 * 2 * np.pi  # MHz\n",
    "not_duration = np.pi / (max_rabi_rate)  # us\n",
    "not_values = np.array([1])\n",
    "shots = 1024\n",
    "not_results = simulate_more_realistic_qubit(\n",
    "    duration=not_duration, values=not_values, shots=shots\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Realised NOT Gate:\n",
      "[[0.75412104-0.02524955j 0.1026601 -0.64817036j]\n",
      " [0.1026601 -0.64817036j 0.70940919+0.25704996j]]\n",
      "Ideal NOT Gate:\n",
      "[[0 1]\n",
      " [1 0]]\n",
      "NOT Gate Error:0.5693360860922008\n",
      "NOT estimated probability of getting 1:0.4375\n",
      "NOT estimate standard error:0.015502449088269086\n",
      "\n"
     ]
    }
   ],
   "source": [
    "realised_not_gate = not_results[\"unitary\"]\n",
    "ideal_not_gate = np.array([[0, 1], [1, 0]])\n",
    "not_error = error_norm(realised_not_gate, ideal_not_gate)\n",
    "not_measurements = not_results[\"measurements\"]\n",
    "not_probability, not_standard_error = estimate_probability_of_one(not_measurements)\n",
    "print(\"Realised NOT Gate:\")\n",
    "print(realised_not_gate)\n",
    "print(\"Ideal NOT Gate:\")\n",
    "print(ideal_not_gate)\n",
    "print(\"NOT Gate Error:\" + str(not_error))\n",
    "print(\"NOT estimated probability of getting 1:\" + str(not_probability))\n",
    "print(\"NOT estimate standard error:\" + str(not_standard_error) + \"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_rabi_rate = 20 * 2 * np.pi  # MHz\n",
    "not_duration = np.pi / (max_rabi_rate)  # us\n",
    "not_values = np.array([max_rabi_rate])\n",
    "control_count = 2\n",
    "segment_count = 16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from qctrlvisualizer import get_qctrl_style, plot_controls\n",
    "\n",
    "from qctrl import Qctrl\n",
    "\n",
    "plt.style.use(get_qctrl_style())\n",
    "\n",
    "# Sparse matrix imports\n",
    "from scipy.sparse import coo_matrix\n",
    "\n",
    "# Starting a session with the API\n",
    "qctrl = Qctrl()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "controls = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 7s.\n",
      "Optimized cost:\t 2.2498371343041823e-13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 1) ROBUST CONTROL OF A SINGLE QUBIT :  \n",
    "\n",
    "# Define standard matrices\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_m = np.array([[0, 1], [0, 0]])\n",
    "\n",
    "# Define physical constants\n",
    "nu = 2 * np.pi * 0.5 * 1e6  # Hz\n",
    "gamma_max = 2 * np.pi * 0.5e6  # Hz\n",
    "alpha_max = 2 * np.pi * 0.5e6  # Hz\n",
    "segment_count = 50\n",
    "duration = 10e-6  # s\n",
    "\n",
    "# Define the data flow graph describing the system\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create a constant piecewise-constant (PWC) operator representing the\n",
    "    # detuning term\n",
    "    detuning = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration,\n",
    "        operator=nu * sigma_z / 2,\n",
    "    )\n",
    "\n",
    "    # Create a complex PWC signal, with optimizable modulus and phase,\n",
    "    # representing gamma(t)\n",
    "    gamma = qctrl.operations.complex_pwc_signal(\n",
    "        moduli=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            lower_bound=0,\n",
    "            upper_bound=gamma_max,\n",
    "        ),\n",
    "        phases=qctrl.operations.unbounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            initial_lower_bound=0,\n",
    "            initial_upper_bound=2 * np.pi,\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"gamma\",\n",
    "    )\n",
    "    # Create a PWC operator representing the drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=gamma, operator=sigma_m)\n",
    "    )\n",
    "\n",
    "    # Create a real PWC signal, with optimizable amplitude, representing\n",
    "    # alpha(t)\n",
    "    alpha = qctrl.operations.pwc_signal(\n",
    "        values=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"alpha\",\n",
    "    )\n",
    "    # Create a PWC operator representing the clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha, operator=sigma_z / 2)\n",
    "\n",
    "    # Create a constant PWC operator representing the dephasing noise\n",
    "    # (note that we scale by 1/duration to ensure consistent units between\n",
    "    # the noise Hamiltonian and the control Hamiltonian)\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create the target operator\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        hamiltonian=qctrl.operations.pwc_sum([detuning, drive, shift]),\n",
    "        noise_operators=[dephasing],\n",
    "        target_operator=target_operator,\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha\", \"gamma\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha$\": optimization_result.output[\"alpha\"],\n",
    "        \"$\\\\gamma$\": optimization_result.output[\"gamma\"],\n",
    "    },\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 14s.\n",
      "Optimized cost:\t 9.87769246820449e-11\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2) TIME-SYMMETRIZED PULSES : \n",
    "\n",
    "# Define standard matrices\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_m = np.array([[0, 1], [0, 0]])\n",
    "\n",
    "# Define physical constraints\n",
    "gamma_max = 2 * np.pi * 8.5e6  # Hz\n",
    "alpha_max = 2 * np.pi * 8.5e6  # Hz\n",
    "nu = 2 * np.pi * 6e6  # Hz\n",
    "segment_count = 50\n",
    "duration = 154e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create detuning term\n",
    "    detuning = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration,\n",
    "        operator=nu * sigma_z / 2,\n",
    "    )\n",
    "\n",
    "    # Create a complex PWC signal describing the first half of gamma(t)\n",
    "    half_gamma = qctrl.operations.complex_pwc_signal(\n",
    "        moduli=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=0, upper_bound=gamma_max\n",
    "        ),\n",
    "        phases=qctrl.operations.unbounded_optimization_variable(\n",
    "            count=segment_count,\n",
    "            initial_lower_bound=0,\n",
    "            initial_upper_bound=2 * np.pi,\n",
    "        ),\n",
    "        duration=duration / 2,\n",
    "    )\n",
    "    # Define gamma(t) by symmetrizing half_gamma\n",
    "    gamma = qctrl.operations.symmetrize_pwc(\n",
    "        half_gamma,\n",
    "        name=\"gamma\",\n",
    "    )\n",
    "    # Create drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=gamma, operator=sigma_m)\n",
    "    )\n",
    "\n",
    "    # Create alpha(t) similarly\n",
    "    alpha = qctrl.operations.symmetrize_pwc(\n",
    "        qctrl.operations.pwc_signal(\n",
    "            values=qctrl.operations.bounded_optimization_variable(\n",
    "                count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "            ),\n",
    "            duration=duration / 2,\n",
    "        ),\n",
    "        name=\"alpha\",\n",
    "    )\n",
    "    # Create clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha, operator=sigma_z / 2)\n",
    "\n",
    "    # Create dephasing noise term\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create target\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum([detuning, drive, shift]),\n",
    "        target_operator,\n",
    "        [dephasing],\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha\", \"gamma\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha$\": optimization_result.output[\"alpha\"],\n",
    "        \"$\\\\gamma$\": optimization_result.output[\"gamma\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 7s.\n",
      "Optimized cost:\t 1.3322676295501878e-15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3) 3) NON-LINEAR DEPENDENCE ON CONTROL PULSES :\n",
    "\n",
    "# Define Pauli matrices\n",
    "sigma_x = np.array([[0, 1], [1, 0]])\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "\n",
    "# Define physical constraints\n",
    "alpha_max = 2 * np.pi * 6e6  # Hz\n",
    "segment_count = 40\n",
    "duration = 200e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create the values backing the alpha_1(t) signal\n",
    "    alpha_1_values = qctrl.operations.bounded_optimization_variable(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "    )\n",
    "\n",
    "    # Create the alpha_1(t) signal\n",
    "    alpha_1 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_values, duration=duration, name=\"alpha_1\"\n",
    "    )\n",
    "\n",
    "    # Apply a non-linear transformation to create the alpha_1_squared(t) signal\n",
    "    alpha_1_squared_values = alpha_1_values * (alpha_1_values / alpha_max)\n",
    "    alpha_1_squared = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_squared_values, duration=duration, name=\"alpha_1_squared\"\n",
    "    )\n",
    "\n",
    "    # Create the alpha_2(t) signal\n",
    "    alpha_2 = qctrl.operations.pwc_signal(\n",
    "        values=qctrl.operations.bounded_optimization_variable(\n",
    "            count=segment_count, lower_bound=-alpha_max, upper_bound=alpha_max\n",
    "        ),\n",
    "        duration=duration,\n",
    "        name=\"alpha_2\",\n",
    "    )\n",
    "\n",
    "    # Create Hamiltonian terms\n",
    "    x_term = qctrl.operations.pwc_operator(signal=alpha_1, operator=sigma_x)\n",
    "    y_term = qctrl.operations.pwc_operator(signal=alpha_1_squared, operator=sigma_y)\n",
    "    z_term = qctrl.operations.pwc_operator(signal=alpha_2, operator=sigma_z)\n",
    "\n",
    "    target_operator = qctrl.operations.target(operator=sigma_x)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum(terms=[x_term, y_term, z_term]),\n",
    "        target_operator=target_operator,\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha_1\", \"alpha_1_squared\", \"alpha_2\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha_1$\": optimization_result.output[\"alpha_1\"],\n",
    "        \"$\\\\alpha_1^2$\": optimization_result.output[\"alpha_1_squared\"],\n",
    "        \"$\\\\alpha_2$\": optimization_result.output[\"alpha_2\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_optimization has started.\n",
      "Your task calculate_optimization has completed in 71s.\n",
      "Optimized cost:\t 7.022683504132289e-13\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4) BAND-LIMITED PULSES WITH BOUNDED SLEW RATES\n",
    "\n",
    "# Define standard matrices\n",
    "sigma_x = np.array([[0, 1], [1, 0]])\n",
    "sigma_z = np.array([[1, 0], [0, -1]])\n",
    "sigma_y = np.array([[0, -1j], [1j, 0]])\n",
    "\n",
    "# Define physical constraints\n",
    "alpha_max = 2 * np.pi * 8.5e6  # Hz\n",
    "max_slew_rate = alpha_max / 10\n",
    "segment_count = 250\n",
    "duration = 400e-9  # s\n",
    "\n",
    "# Create graph object\n",
    "with qctrl.create_graph() as graph:\n",
    "\n",
    "    # Create alpha_1(t) signal\n",
    "    alpha_1_values = qctrl.operations.anchored_difference_bounded_variables(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "        difference_bound=max_slew_rate,\n",
    "    )\n",
    "    alpha_1 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_1_values, duration=duration, name=\"alpha_1\"\n",
    "    )\n",
    "\n",
    "    # Create alpha_2(t) signal\n",
    "    alpha_2_values = qctrl.operations.anchored_difference_bounded_variables(\n",
    "        count=segment_count,\n",
    "        lower_bound=-alpha_max,\n",
    "        upper_bound=alpha_max,\n",
    "        difference_bound=max_slew_rate,\n",
    "    )\n",
    "    alpha_2 = qctrl.operations.pwc_signal(\n",
    "        values=alpha_2_values, duration=duration, name=\"alpha_2\"\n",
    "    )\n",
    "\n",
    "    # Create drive term\n",
    "    drive = qctrl.operations.pwc_operator_hermitian_part(\n",
    "        qctrl.operations.pwc_operator(signal=alpha_1, operator=sigma_x / 2)\n",
    "    )\n",
    "\n",
    "    # Create clock shift term\n",
    "    shift = qctrl.operations.pwc_operator(signal=alpha_2, operator=sigma_z / 2)\n",
    "\n",
    "    # Create dephasing noise term\n",
    "    dephasing = qctrl.operations.constant_pwc_operator(\n",
    "        duration=duration, operator=sigma_z / duration\n",
    "    )\n",
    "\n",
    "    # Create target\n",
    "    target_operator = qctrl.operations.target(operator=sigma_y)\n",
    "\n",
    "    # Create infidelity\n",
    "    infidelity = qctrl.operations.infidelity_pwc(\n",
    "        qctrl.operations.pwc_sum([drive, shift]),\n",
    "        target_operator,\n",
    "        [dephasing],\n",
    "        name=\"infidelity\",\n",
    "    )\n",
    "\n",
    "# Run the optimization\n",
    "optimization_result = qctrl.functions.calculate_optimization(\n",
    "    cost_node_name=\"infidelity\",\n",
    "    output_node_names=[\"alpha_1\", \"alpha_2\"],\n",
    "    graph=graph,\n",
    ")\n",
    "\n",
    "print(\"Optimized cost:\\t\", optimization_result.cost)\n",
    "\n",
    "# Plot the optimized controls\n",
    "plot_controls(\n",
    "    plt.figure(),\n",
    "    controls={\n",
    "        \"$\\\\alpha_1$\": optimization_result.output[\"alpha_1\"],\n",
    "        \"$\\\\alpha_2$\": optimization_result.output[\"alpha_2\"],\n",
    "    },\n",
    ")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for k in range(control_count):\n",
    "    # Create a control .\n",
    "    real_part = np.random.random(size=[segment_count])\n",
    "    imag_part = np.random.random(size=[segment_count])\n",
    "    values = 0.15 * k * (real_part + 1j * imag_part)\n",
    "\n",
    "    controls.append({\"duration\": duration, \"values\": values})\n",
    "     \n",
    "# Plot the last control as an example.\n",
    "plot_controls(\n",
    "    figure=plt.figure(),\n",
    "    controls={\n",
    "        \"$\\Omega$\": [\n",
    "            {\"duration\": duration / segment_count, \"value\": value} for value in values\n",
    "        ]\n",
    "    },\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_qchack_measurements has completed in 4s.\n"
     ]
    }
   ],
   "source": [
    "# Obtain the results of the experiment.\n",
    "experiment_results = qctrl.functions.calculate_qchack_measurements(\n",
    "    controls=controls,\n",
    "    shot_count=shot_count,\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "control #0: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "control #1: [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0]\n",
      "control #2: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0]\n",
      "control #3: [1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1]\n",
      "control #4: [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1]\n"
     ]
    }
   ],
   "source": [
    "measurements = experiment_results.measurements\n",
    "for k, measurement_counts in enumerate(measurements):\n",
    "    print(f\"control #{k}: {measurement_counts}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "control #0: P(|0>) = 0.97, P(|1>) = 0.03, P(|2>) = 0.00\n",
      "control #1: P(|0>) = 0.72, P(|1>) = 0.28, P(|2>) = 0.00\n",
      "control #2: P(|0>) = 0.62, P(|1>) = 0.38, P(|2>) = 0.00\n",
      "control #3: P(|0>) = 0.38, P(|1>) = 0.62, P(|2>) = 0.00\n",
      "control #4: P(|0>) = 0.19, P(|1>) = 0.78, P(|2>) = 0.03\n"
     ]
    }
   ],
   "source": [
    "for k, measurement_counts in enumerate(measurements):\n",
    "    p0 = measurement_counts.count(0) / shot_count\n",
    "    p1 = measurement_counts.count(1) / shot_count\n",
    "    p2 = measurement_counts.count(2) / shot_count\n",
    "    print(f\"control #{k}: P(|0>) = {p0:.2f}, P(|1>) = {p1:.2f}, P(|2>) = {p2:.2f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your task calculate_qchack_measurements has completed in 4s.\n",
      "With  1 repetitions: P(|0>) = 0.59, P(|1>) = 0.41, P(|2>) = 0.00\n",
      "With  4 repetitions: P(|0>) = 0.44, P(|1>) = 0.56, P(|2>) = 0.00\n",
      "With 16 repetitions: P(|0>) = 0.88, P(|1>) = 0.12, P(|2>) = 0.00\n",
      "With 32 repetitions: P(|0>) = 0.75, P(|1>) = 0.25, P(|2>) = 0.00\n",
      "With 64 repetitions: P(|0>) = 0.56, P(|1>) = 0.44, P(|2>) = 0.00\n"
     ]
    }
   ],
   "source": [
    "repetitions = [1, 4, 16, 32, 64]\n",
    "\n",
    "controls = []\n",
    "# Create a random string of complex numbers for all control,\n",
    "# but set a different repetition_count for each control.\n",
    "real_part = np.random.random(size=[segment_count])\n",
    "imag_part = np.random.random(size=[segment_count])\n",
    "values = 0.5 * (real_part + 1j * imag_part)\n",
    "\n",
    "for repetition_count in repetitions:\n",
    "    controls.append(\n",
    "        {\"duration\": duration, \"values\": values, \"repetition_count\": repetition_count}\n",
    "    )\n",
    "\n",
    "experiment_results = qctrl.functions.calculate_qchack_measurements(\n",
    "    controls=controls,\n",
    "    shot_count=shot_count,\n",
    ")\n",
    "\n",
    "for repetition_count, measurement_counts in zip(\n",
    "    repetitions, experiment_results.measurements\n",
    "):\n",
    "    p0 = measurement_counts.count(0) / shot_count\n",
    "    p1 = measurement_counts.count(1) / shot_count\n",
    "    p2 = measurement_counts.count(2) / shot_count\n",
    "    print(\n",
    "        f\"With {repetition_count:2d} repetitions: P(|0>) = {p0:.2f}, P(|1>) = {p1:.2f}, P(|2>) = {p2:.2f}\"\n",
    "    )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
